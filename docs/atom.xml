<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DevShe 个人博客</title>
  
  <subtitle>原创文章分享</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://devshe.gitlab.io/blog/"/>
  <updated>2020-11-07T11:33:19.527Z</updated>
  <id>https://devshe.gitlab.io/blog/</id>
  
  <author>
    <name>DevShe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 基础</title>
    <link href="https://devshe.gitlab.io/blog/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%9F%BA%E7%A1%80.html"/>
    <id>https://devshe.gitlab.io/blog/编程语言/Java/Java基础.html</id>
    <published>2020-11-07T11:33:19.527Z</published>
    <updated>2020-11-07T11:33:19.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型">基本类型</h2><figure><img src="assets/Java基础_20190513-110011.png" alt=""><figcaption>primitive bytes</figcaption></figure><ol type="1"><li><p>float 和 double</p><ul><li>float 是单精度浮点数，内存分配 4 个字节，占 32 位，有效小数位 6 - 7 位</li><li>double 是双精度浮点数，内存分配 8 个字节，占 64 位，有效小数位 15 位</li><li><strong>默认声明的小数是 double 类型的</strong>，如 <code>double d=4.0</code> 如果声明： <code>float x = 4.0</code>则会报错，需要如下写法：<code>float x = 4.0f</code>或者<code>float x = (float)4.0</code> 其中 4.0f 后面的 f 只是为了区别 double，并不代表任何数字上的意义</li></ul></li></ol><h2 id="java-中的数组">Java 中的数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String[] strs = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">String[] strs = &#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line">String[][] str2d = <span class="keyword">new</span> String[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">String[][] str2d = <span class="keyword">new</span> String[<span class="number">2</span>][];</span><br><span class="line">str2d[<span class="number">0</span>] = <span class="keyword">new</span> String[] &#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;;</span><br><span class="line">str2d[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">String[][] str2d = &#123;</span><br><span class="line">    &#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"aaa"</span>, <span class="string">"bbb"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组也是一个对象</span></span><br><span class="line"><span class="comment">// 有 .length 成员</span></span><br><span class="line"><span class="comment">// 有 .clone() 方法</span></span><br></pre></td></tr></table></figure><h2 id="hashcode-compareto-equals">hashCode / compareTo / equals</h2><h3 id="hashcode-for-operation-in-hashmap-hashtable-hashset">hashCode : for operation in HashMap / HashTable / HashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = aString != <span class="keyword">null</span> ? aString.hashCode() : <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">31</span> * result + (aLong != <span class="keyword">null</span> ? aLong.hashCode() : <span class="number">0</span>);</span><br><span class="line">    result = <span class="number">31</span> * result + (aClassObject != <span class="keyword">null</span> ? aClassObject.hashCode() : <span class="number">0</span>);</span><br><span class="line">    result = <span class="number">31</span> * result + primitiveInt;</span><br><span class="line">    result = <span class="number">31</span> * result + (primitiveFloat != +<span class="number">0.0f</span> ? Float.floatToIntBits(primitiveFloat) : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="compareto-为了顺序实现-java.lang.comparablet-接口">compareTo : 为了顺序，实现 <code>java.lang.Comparable&lt;T&gt;</code> 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Account aThat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> BEFORE = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> EQUAL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> AFTER = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this optimization is usually worthwhile, and can</span></span><br><span class="line">    <span class="comment">//always be added</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == aThat) <span class="keyword">return</span> EQUAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//primitive numbers follow this form</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fAccountNumber &lt; aThat.fAccountNumber) <span class="keyword">return</span> BEFORE;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fAccountNumber &gt; aThat.fAccountNumber) <span class="keyword">return</span> AFTER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//booleans follow this form</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.fIsNewAccount &amp;&amp; aThat.fIsNewAccount) <span class="keyword">return</span> BEFORE;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fIsNewAccount &amp;&amp; !aThat.fIsNewAccount) <span class="keyword">return</span> AFTER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//objects, including type-safe enums, follow this form</span></span><br><span class="line">    <span class="comment">//note that null objects will throw an exception here</span></span><br><span class="line">    <span class="keyword">int</span> comparison = <span class="keyword">this</span>.fAccountType.compareTo(aThat.fAccountType);</span><br><span class="line">    <span class="keyword">if</span> (comparison != EQUAL) <span class="keyword">return</span> comparison;</span><br><span class="line"></span><br><span class="line">    comparison = <span class="keyword">this</span>.fLastName.compareTo(aThat.fLastName);</span><br><span class="line">    <span class="keyword">if</span> (comparison != EQUAL) <span class="keyword">return</span> comparison;</span><br><span class="line"></span><br><span class="line">    comparison = <span class="keyword">this</span>.fFirstName.compareTo(aThat.fFirstName);</span><br><span class="line">    <span class="keyword">if</span> (comparison != EQUAL) <span class="keyword">return</span> comparison;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fBalance &lt; aThat.fBalance) <span class="keyword">return</span> BEFORE;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fBalance &gt; aThat.fBalance) <span class="keyword">return</span> AFTER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//all comparisons have yielded equality</span></span><br><span class="line">    <span class="comment">//verify that compareTo is consistent with equals (optional)</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">this</span>.equals(aThat) : <span class="string">"compareTo inconsistent with equals."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EQUAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="equals-主要用于-collections-api">equals 主要用于 Collections API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    TestClass testClass = (TestClass) o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (primitiveInt != testClass.primitiveInt) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (primitiveFloat != testClass.primitiveFloat) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!Objects.equals(aString, testClass.aString)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Objects.equals(aLong, testClass.aLong)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(aClassObject, testClass.aClassObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exception">Exception</h2><ol type="1"><li><p>继承关系</p><figure><img src="assets/Java基础_20190528-200107.png" alt=""><figcaption>Exception</figcaption></figure></li><li><p>Checked Exception / Unchecked Exception</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">            ---&gt; Throwable  &lt;---</span><br><span class="line">            |    (checked)     |</span><br><span class="line">            |                  |</span><br><span class="line">            |                  |</span><br><span class="line">    ---&gt; Exception           Error</span><br><span class="line">    |    (checked)        (unchecked)</span><br><span class="line">    |</span><br><span class="line">RuntimeException</span><br><span class="line">(unchecked)</span><br></pre></td></tr></table></figure></p></li><li><p>Checked Exceptions (like: IOException) must check</p></li><li><p>Unchecked Exceptions</p></li><li><p>Errors : 如 <code>StackOverflowError</code> and <code>OutOfMemoryError</code>.</p></li><li><p>子类 can throw 比父类更少 checked exceptions，不能更多</p></li><li><p>try-with-resources</p><p>Java 7 后，我们可以使用简单的语法来使用 extend AutoCloseable 的资源，资源将会自动的 close.</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Scanner contents = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(playerFile))) &#123;</span><br><span class="line">  <span class="keyword">return</span> Integer.parseInt(contents.nextLine());</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e ) &#123;</span><br><span class="line">  logger.warn(<span class="string">"File not found, resetting score."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="overide-vs-overload-overide-注解">Overide vs Overload + <span class="citation" data-cites="Overide">@Overide</span> 注解</h2><h2 id="类的加载顺序">类的加载顺序</h2><p><a href="https://blog.csdn.net/weixin_37766296/article/details/80545283" class="uri" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37766296/article/details/80545283</a></p><h2 id="java-线程">JAVA 线程</h2><h3 id="线程的生命周期">线程的生命周期</h3><figure><img src="assets/Java基础_20190509-175029.png" alt=""><figcaption>Thread State</figcaption></figure><figure><img src="assets/Java基础_20190509-175046.png" alt=""><figcaption>Runable State</figcaption></figure><h3 id="daemon-thread-vs-user-thread">Daemon thread vs User thread</h3><p>A daemon thread is a thread that does not prevent the JVM from exiting when the program finishes but the thread is still running. An example for a daemon thread is the garbage collection.</p><p>主线程结束后，如果只有 Daemon threads，Daemon threads 自动退出，程序结束。</p><p>优先级: User thread &gt; Daemon Thread</p><p>You can use the <code>setDaemon(boolean)</code> method to change the <code>Thread</code> daemon properties before the thread starts.</p><h3 id="thread.sleepms-vs-threa.yield">Thread.sleep(ms) vs Threa.yield()</h3><p>sleep(): causes the thread to definitely stop executing for a given amount of time; if no other thread or process needs to be run, the CPU will be idle (and probably enter a power saving mode).</p><p>yield(): basically means that the thread is not doing anything particularly important and if any other threads or processes need to be run, they should. Otherwise, the current thread will continue to run.</p><h3 id="java.util.concurrent.executors">java.util.concurrent.Executors</h3><p>提供一个直接处理任务的层，帮你管理 Thread 对象</p><p>Comand 设计模式</p><h3 id="java-8-lambda">Java 8 Lambda</h3><p>Lambda 对应的接口类型</p><ol type="1"><li><p>Java 7 已经存在的</p><ul><li>java.lang.Runnable : () -&gt; {}</li><li>java.util.concurrent.Callable: () -&gt; { return V } , can throw exception</li><li>java.security.PrivilegedAction</li><li>java.util.Comparator: (T t1, T t2) -&gt; { return int }</li><li>java.io.FileFilter</li><li>java.beans.PropertyChangeListener</li></ul></li><li><p>Java 8 新增的 <code>java.util.function</code></p><ul><li><code>Predicate&lt;T&gt;</code>——接收 T 对象并返回 boolean</li><li><code>Consumer&lt;T&gt;</code>——接收 T 对象，不返回值</li><li><code>Function&lt;T, R&gt;</code>——接收 T 对象，返回R对象</li><li><code>Supplier&lt;T&gt;</code>——提供 T 对象（例如工厂），不接收值</li><li><code>UnaryOperator&lt;T&gt;</code>——接收 T 对象，返回 T 对象</li><li><code>BinaryOperator&lt;T&gt;</code>——接收两个 T 对象，返回 T 对象</li></ul></li></ol><h2 id="常用-jvm-参数">常用 JVM 参数</h2><h3 id="gc相关">GC相关</h3><ol type="1"><li><code>-XX:+PrintGCDetails</code></li><li>``</li></ol><h3 id="堆分配相关">堆分配相关</h3><ol type="1"><li><p>-Xmx –Xms：指定java堆最大值（默认值是物理内存的1/4(&lt;1GB)）和初始java堆最小值（默认值是物理内存的1/64(&lt;1GB))</p><p>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于<strong>40%</strong>时，JVM就会增大堆直到-Xmx的最大限制.，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于<strong>70%</strong>时，JVM会减少堆直到 -Xms的最小限制。开发过程中，<strong>通常会将 -Xms 与 -Xmx两个参数的配置相同的值</strong>，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。</p><p><strong>注意：此处设置的是Java堆大小，也就是新生代大小 + 年老代大小</strong></p></li></ol><h3 id="栈的分配相关">栈的分配相关</h3><ol type="1"><li><code>-Xss</code></li></ol><h2 id="基本数据结构">基本数据结构</h2><p>Stack Deque, Vector Queue, List, Set Collection</p><p>Map: HashMap, HashTable List: ArrayList, LinkedList</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本类型&quot;&gt;基本类型&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&quot;assets/Java基础_20190513-110011.png&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;primitive bytes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol 
      
    
    </summary>
    
      <category term="编程语言" scheme="https://devshe.gitlab.io/blog/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="https://devshe.gitlab.io/blog/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
  </entry>
  
</feed>
